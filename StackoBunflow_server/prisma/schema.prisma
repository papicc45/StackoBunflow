// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

model User {
    id Int @id @default(autoincrement())
    userid String @unique
    password String
    nickname String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")
    answer Answer[]
    comment Comment[]
    question Question[]
    recommended Recommended[]
    status String
    @@unique([id, userid])
}

model Question {
    id Int @id @default(autoincrement())
    title String @db.Text
    content String @db.Text
    count Int @default(0)
    tag String @db.Text
    user User @relation(fields : [userId], references : [id])
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")
    userId Int
    answer Answer[]
    comment Comment[]
    @@index([userId])
}

model Comment {
    id Int @id @default(autoincrement())
    content String @db.Text
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")
    user User @relation(fields : [userId], references : [id])
    userId Int
    question Question @relation(fields: [questionId], references: [id])
    questionId Int
    @@index([userId, questionId])
}

model Answer {
    id Int @id @default(autoincrement())
    content String @db.Text
    recommend Int @default(0)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")
    user User @relation(fields : [userId], references : [id])
    userId Int
    question Question @relation(fields : [questionId], references: [id])
    questionId Int
    recommended Recommended[]
    @@index([userId, questionId])
}

model Recommended {
    id Int @id @default(autoincrement())
    user User @relation(fields: [userId], references: [id])
    userId Int
    answer Answer @relation(fields: [answerId], references: [id])
    answerId Int
}